cmake_minimum_required(VERSION 3.13)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

option(MTRACK_32 "Enable 32 bit builds" OFF)
option(MTRACK_ASAN "Enable asan" OFF)
option(MTRACK_WASM "Enable wasm" OFF)

string(REGEX REPLACE "-std=[^ ]*" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "")
string(REPLACE "-fno-rtti" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "")

set(MTRACK_BASE_DIR ${CMAKE_CURRENT_LIST_DIR})

if (${MTRACK_32})
    set(CMAKE_C_FLAGS  "${CMAKE_C_FLAGS} -m32")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -m32")
endif ()

if (${MTRACK_ASAN})
    set(CMAKE_C_FLAGS  "${CMAKE_CXX_FLAGS} -fsanitize=address")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fsanitize=address")
endif ()

if (${MTRACK_WASM})
    message("WASM")
    find_file(EMCC_BINARY emcc)
    if (NOT EMCC_BINARY)
        message(FATAL_ERROR "no emcc")
    endif()
    find_file(EMCXX_BINARY em++)
    if (NOT EMCXX_BINARY)
        message(FATAL_ERROR "no em++")
    endif()
    find_file(EMAR_BINARY emar)
    if (NOT EMAR_BINARY)
        message(FATAL_ERROR "no emar")
    endif()
    find_file(EMRANLIB_BINARY emranlib)
    if (NOT EMRANLIB_BINARY)
        message(FATAL_ERROR "no emranlib")
    endif()
    set(CMAKE_AR ${EMAR_BINARY})
    set(CMAKE_RANLIB ${EMRANLIB_BINARY})
    set(CMAKE_C_COMPILER ${EMCC_BINARY})
    set(CMAKE_CXX_COMPILER ${EMCXX_BINARY})
    #set(EMSCRIPTEN_FLAGS "-sWASM=1 -sSINGLE_FILE")
    #set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EMSCRIPTEN_FLAGS}")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${EMSCRIPTEN_FLAGS}")
endif ()

project(mtrack) #must happen after the compiler is set (for example mtrack modes above)

if (${MTRACK_WASM})
    add_subdirectory(wasm)
else()
    add_subdirectory(preload)
    add_subdirectory(parser)
    add_subdirectory(visualizer)
endif()

add_subdirectory(3rdparty)
add_subdirectory(samples)
